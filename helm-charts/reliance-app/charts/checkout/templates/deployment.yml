apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
  # Labels for the Deployment object itself (good for organization)
    app: {{ .Chart.Name }}
    environment: {{ .Values.environment }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      # This selector tells the Deployment how to find the Pods it manages.
      # It should match the Pod labels exactly.
      app: {{ .Chart.Name }}
      environment: {{ .Values.environment }}
  strategy:
  template:
    metadata:
      labels:
        # These labels are applied to every Pod created.
        # The Service looks for these labels.
        app: {{ .Chart.Name }}
        environment: {{ .Values.environment }}
    spec:
      nodeSelector:
        kubernetes.azure.com/agentpool: {{ .Values.nodeSelector.pool }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: SSL_CERT_PATH
              value: {{ .Values.secrets.SSL_CERT_PATH }}  
          envFrom:
            - secretRef:
                name: mysql-credentials
            - configMapRef:
                name: {{ .Release.Name }}-{{ .Chart.Name }}-config
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.service.port }}"]
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.service.port }}"]
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: ssl-certs
              mountPath: "/ssl"
              readOnly: true
      volumes:
        - name: ssl-certs
          secret:
            secretName: {{ .Values.sslVolume.secretName }}
