name: Build and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to use (e.g., v1.0.0)'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-publish:
    name: Build and Publish Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [
          frontend, 
          cartservice, 
          productcatalogservice, 
          currencyservice, 
          paymentservice, 
          shippingservice, 
          emailservice, 
          checkoutservice, 
          recommendationservice, 
          adservice,
          shoppingassistantservice
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/microservices-demo-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=raw,value=${{ github.event.inputs.version || 'latest' }}

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ./src/${{ matrix.service }}
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/microservices-demo-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/microservices-demo-${{ matrix.service }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Run Trivy misconfiguration scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/microservices-demo-${{ matrix.service }}:${{ github.sha }}
          scan-type: 'config'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.OWNER }}/microservices-demo-${{ matrix.service }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.service }}-${{ steps.version.outputs.VERSION || github.sha }}
          path: sbom-${{ matrix.service }}.spdx.json

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ./src/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  consolidate-sboms:
    name: Consolidate SBOMs
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Download all SBOMs
        uses: actions/download-artifact@v3
        with:
          path: ./sboms
          
      - name: Consolidate SBOMs
        run: |
          mkdir -p consolidated-sbom-${{ steps.version.outputs.VERSION }}
          cp -r sboms/*/*.json consolidated-sbom-${{ steps.version.outputs.VERSION }}/
          echo "Created consolidated SBOM directory with all service SBOMs"
          
      - name: Upload consolidated SBOM
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-sbom-${{ steps.version.outputs.VERSION }}
          path: consolidated-sbom-${{ steps.version.outputs.VERSION }}/

  create-manifest:
    name: Create Deployment Manifest
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_OUTPUT
          fi

      - name: Update Kubernetes manifests
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          REGISTRY=${{ env.REGISTRY }}
          OWNER=${{ env.OWNER }}
          
          # Create a release directory if it doesn't exist
          mkdir -p release-$VERSION
          
          # Copy the kubernetes manifests
          cp -r kubernetes-manifests/* release-$VERSION/
          
          # Update image references in the manifests
          for file in release-$VERSION/*.yaml; do
            sed -i "s|image: .*frontend.*|image: $REGISTRY/$OWNER/microservices-demo-frontend:$VERSION|g" $file
            sed -i "s|image: .*cartservice.*|image: $REGISTRY/$OWNER/microservices-demo-cartservice:$VERSION|g" $file
            sed -i "s|image: .*productcatalogservice.*|image: $REGISTRY/$OWNER/microservices-demo-productcatalogservice:$VERSION|g" $file
            sed -i "s|image: .*currencyservice.*|image: $REGISTRY/$OWNER/microservices-demo-currencyservice:$VERSION|g" $file
            sed -i "s|image: .*paymentservice.*|image: $REGISTRY/$OWNER/microservices-demo-paymentservice:$VERSION|g" $file
            sed -i "s|image: .*shippingservice.*|image: $REGISTRY/$OWNER/microservices-demo-shippingservice:$VERSION|g" $file
            sed -i "s|image: .*emailservice.*|image: $REGISTRY/$OWNER/microservices-demo-emailservice:$VERSION|g" $file
            sed -i "s|image: .*checkoutservice.*|image: $REGISTRY/$OWNER/microservices-demo-checkoutservice:$VERSION|g" $file
            sed -i "s|image: .*recommendationservice.*|image: $REGISTRY/$OWNER/microservices-demo-recommendationservice:$VERSION|g" $file
            sed -i "s|image: .*adservice.*|image: $REGISTRY/$OWNER/microservices-demo-adservice:$VERSION|g" $file
            sed -i "s|image: .*shoppingassistantservice.*|image: $REGISTRY/$OWNER/microservices-demo-shoppingassistantservice:$VERSION|g" $file
          done
          
          # Create a single deployment manifest
          cat release-$VERSION/*.yaml > release-$VERSION/kubernetes-manifests.yaml

      - name: Upload manifests
        uses: actions/upload-artifact@v3
        with:
          name: kubernetes-manifests-${{ steps.version.outputs.VERSION }}
          path: release-${{ steps.version.outputs.VERSION }}/kubernetes-manifests.yaml

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: create-manifest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download manifests
        uses: actions/download-artifact@v3
        with:
          name: kubernetes-manifests-${{ github.ref_name }}
          path: ./

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: kubernetes-manifests.yaml
          name: Release ${{ github.ref_name }}
          body: |
            ## Online Boutique Release ${{ github.ref_name }}
            
            ### Docker Images
            All images are available at GitHub Container Registry:
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-frontend:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-cartservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-productcatalogservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-currencyservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-paymentservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-shippingservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-emailservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-checkoutservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-recommendationservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-adservice:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository_owner }}/microservices-demo-shoppingassistantservice:${{ github.ref_name }}`
            
            ### Deployment
            A single Kubernetes manifest file is attached to this release.
